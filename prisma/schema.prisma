generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                Int                          @id @default(autoincrement())
  createdAt                         DateTime                     @default(now())
  updatedAt                         DateTime                     @updatedAt
  userId                            String                       @unique
  rcno                              Int
  fullName                          String
  email                             String
  keysCreated                       ApiKey[]
  brandCreated                      Brand[]                      @relation("brandCreated")
  breakdownCreated                  Breakdown[]
  breakdownComments                 BreakdownComment[]
  breakdownDetails                  BreakdownDetail[]
  checklistComments                 ChecklistComment[]
  checklistCompletions              ChecklistItem[]
  removedChecklistTemplateItem      ChecklistTemplateItem[]
  divisionCreated                   Division[]                   @relation("divisionCreated")
  divisionUsers                     DivisionUsers[]
  entityCreated                     Entity[]
  entityAssignment                  EntityAssignment[]
  entityAttachment                  EntityAttachment[]
  entityHistory                     EntityHistory[]
  entityRepairRequestApprovedBy     EntityRepairRequest[]        @relation("approvedBy")
  entityRepairRequestOperator       EntityRepairRequest[]        @relation("operator")
  entityRepairRequestProjectManager EntityRepairRequest[]        @relation("projectManager")
  entityRepairRequestRepairedBy     EntityRepairRequest[]        @relation("repairedBy")
  entityRepairRequestRequestedBy    EntityRepairRequest[]        @relation("requestedBy")
  entityRepairRequestSupervisor     EntityRepairRequest[]        @relation("supervisor")
  hullTypeCreated                   HullType[]                   @relation("hullTypeCreated")
  interServiceColor                 InterServiceColor[]          @relation("interServiceColorCreated")
  locationsCreated                  Location[]                   @relation("locationCreated")
  locationUsers                     LocationUsers[]
  notifications                     Notification[]
  removedPeriodicMaintenance        PeriodicMaintenance[]
  verifiedPeriodicMaintenance       PeriodicMaintenance[]        @relation("verifiedBy")
  periodicMaintenanceComment        PeriodicMaintenanceComment[]
  periodicMaintenanceTask           PeriodicMaintenanceTask[]
  repairCreated                     Repair[]
  repairComments                    RepairComment[]
  roleCreated                       Role[]
  sparePRCreated                    SparePR[]
  SparePRDetail                     SparePRDetail[]
  roles                             UserRole[]
  zonesCreated                      Zone[]
  userAssignmentCreated             UserAssignment[]             @relation("userAssignmentCreated")
  userAssignment                    UserAssignment[]
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int
  body      String?
  link      String?
  readAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model Role {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  createdById     Int
  permissionRoles PermissionRole[]
  createdBy       User             @relation(fields: [createdById], references: [id])
  userRoles       UserRole[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model PermissionRole {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  roleId     Int
  permission String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Type {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  entityType        String
  name              String
  active            Boolean             @default(true)
  Entity            Entity[]
  interServiceColor InterServiceColor[]
}

model Location {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  createdById    Int?
  active         Boolean          @default(true)
  zoneId         Int?
  skipFriday     Boolean?         @default(false)
  entities       Entity[]
  histories      EntityHistory[]
  createdBy      User?            @relation("locationCreated", fields: [createdById], references: [id])
  zone           Zone?            @relation(fields: [zoneId], references: [id])
  locationUsers  LocationUsers[]
  userAssignment UserAssignment[]
}

model Zone {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  active         Boolean          @default(true)
  createdById    Int?
  locations      Location[]
  createdBy      User?            @relation(fields: [createdById], references: [id])
  userAssignment UserAssignment[]
}

model ChecklistTemplate {
  id             Int                     @id @default(autoincrement())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  name           String?
  type           String                  @default("Daily")
  items          ChecklistTemplateItem[]
  entitiesDaily  Entity[]                @relation("entityDaily")
  entitiesWeekly Entity[]                @relation("entityWeekly")
}

model ChecklistTemplateItem {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  checklistTemplateId Int
  name                String
  removedAt           DateTime?
  removedById         Int?
  checklistTemplate   ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  removedBy           User?             @relation(fields: [removedById], references: [id])
}

model Checklist {
  id                  Int                @id @default(autoincrement())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  from                DateTime
  to                  DateTime
  type                String             @default("Daily")
  currentMeterReading Int?
  workingHour         Int?
  entityId            Int?
  dailyUsageHours     Int?
  entity              Entity?            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comments            ChecklistComment[]
  items               ChecklistItem[]
  attachments         EntityAttachment[]

  @@unique([entityId, from, to, type])
}

model ChecklistItem {
  id            Int                @id @default(autoincrement())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  checklistId   Int
  description   String
  completedById Int?
  completedAt   DateTime?
  issues        ChecklistComment[]
  checklist     Checklist          @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  completedBy   User?              @relation(fields: [completedById], references: [id])
}

model ChecklistComment {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  checklistId Int
  description String
  userId      Int?
  itemId      Int?
  type        String         @default("Comment")
  checklist   Checklist      @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  item        ChecklistItem? @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user        User?          @relation(fields: [userId], references: [id])
}

model Entity {
  id                        Int                   @id @default(autoincrement())
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  createdById               Int
  machineNumber             String?
  registeredDate            DateTime?
  model                     String?
  typeId                    Int?
  currentRunning            Int?
  lastService               Int?
  engine                    String?
  statusChangedAt           DateTime?
  measurement               String?               @default("km")
  deletedAt                 DateTime?
  dailyChecklistTemplateId  Int?
  weeklyChecklistTemplateId Int?
  locationId                Int?
  status                    String?               @default("Working")
  parentEntityId            Int?
  interService              Int?
  divisionId                Int?
  note                      String?
  dimension                 Float?
  hullTypeId                Int?
  registryNumber            String?
  transit                   Boolean?              @default(false)
  brandId                   Int?
  lastServiceUpdateAt       DateTime?
  currentRunningUpdateAt    DateTime?
  lastLocationId            Int?
  lastZoneId                Int?
  breakdowns                Breakdown[]
  checklists                Checklist[]
  brand                     Brand?                @relation(fields: [brandId], references: [id])
  createdBy                 User                  @relation(fields: [createdById], references: [id])
  dailyChecklistTemplate    ChecklistTemplate?    @relation("entityDaily", fields: [dailyChecklistTemplateId], references: [id])
  division                  Division?             @relation(fields: [divisionId], references: [id])
  hullType                  HullType?             @relation(fields: [hullTypeId], references: [id])
  location                  Location?             @relation(fields: [locationId], references: [id])
  parentEntity              Entity?               @relation("entityLink", fields: [parentEntityId], references: [id], onDelete: Cascade)
  subEntities               Entity[]              @relation("entityLink")
  type                      Type?                 @relation(fields: [typeId], references: [id])
  weeklyChecklistTemplate   ChecklistTemplate?    @relation("entityWeekly", fields: [weeklyChecklistTemplateId], references: [id])
  assignees                 EntityAssignment[]
  attachments               EntityAttachment[]
  histories                 EntityHistory[]
  repairsRequests           EntityRepairRequest[]
  periodicMaintenances      PeriodicMaintenance[]
  repairs                   Repair[]
  sparePRs                  SparePR[]
}

model EntityAssignment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  entityId  Int
  type      String    @default("User")
  removedAt DateTime?
  entity    Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
}

model EntityAttachment {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  userId             Int
  entityId           Int
  description        String
  mimeType           String?
  originalName       String?
  sharepointFileName String?
  mode               String     @default("Public")
  checklistId        Int?
  favourite          Boolean?   @default(false)
  checklist          Checklist? @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  entity             Entity     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  user               User       @relation(fields: [userId], references: [id])
}

model EntityHistory {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  entityId      Int
  completedById Int?
  type          String
  description   String
  entityType    String?
  workingHour   Float?
  idleHour      Float?
  breakdownHour Float?
  locationId    Int?
  entityStatus  String?
  completedBy   User?     @relation(fields: [completedById], references: [id])
  entity        Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  location      Location? @relation(fields: [locationId], references: [id])
}

model EntityRepairRequest {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  entityId         Int
  internal         Boolean   @default(true)
  projectName      String?
  reason           String?
  additionalInfo   String?
  attendInfo       String?
  operatorId       Int?
  supervisorId     Int?
  projectManagerId Int?
  requestorId      Int?
  approverId       Int?
  approvedAt       DateTime?
  repairedAt       DateTime?
  repairedById     Int?
  location         String?
  approvedBy       User?     @relation("approvedBy", fields: [approverId], references: [id])
  entity           Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  operator         User?     @relation("operator", fields: [operatorId], references: [id])
  projectManager   User?     @relation("projectManager", fields: [projectManagerId], references: [id])
  repairedBy       User?     @relation("repairedBy", fields: [repairedById], references: [id])
  requestedBy      User?     @relation("requestedBy", fields: [requestorId], references: [id])
  supervisor       User?     @relation("supervisor", fields: [supervisorId], references: [id])
}

model SparePR {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  entityId       Int
  requestedDate  DateTime?
  createdById    Int?
  name           String
  completedAt    DateTime?
  createdBy      User?           @relation(fields: [createdById], references: [id])
  entity         Entity          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  sparePRDetails SparePRDetail[]
}

model SparePRDetail {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sparePRId   Int
  description String
  createdById Int?
  createdBy   User?    @relation(fields: [createdById], references: [id])
  sparePR     SparePR  @relation(fields: [sparePRId], references: [id], onDelete: Cascade)
}

model PeriodicMaintenanceTask {
  id                    Int                          @id @default(autoincrement())
  periodicMaintenanceId Int
  parentTaskId          Int?
  name                  String
  completedById         Int?
  completedAt           DateTime?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  remarks               PeriodicMaintenanceComment[]
  completedBy           User?                        @relation(fields: [completedById], references: [id])
  parentTask            PeriodicMaintenanceTask?     @relation("taskLink", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks              PeriodicMaintenanceTask[]    @relation("taskLink")
  periodicMaintenance   PeriodicMaintenance          @relation(fields: [periodicMaintenanceId], references: [id], onDelete: Cascade)
}

model PeriodicMaintenanceComment {
  id                    Int                      @id @default(autoincrement())
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  type                  String                   @default("Remark")
  description           String
  periodicMaintenanceId Int?
  taskId                Int?
  createdById           Int?
  createdBy             User?                    @relation(fields: [createdById], references: [id])
  periodicMaintenance   PeriodicMaintenance?     @relation(fields: [periodicMaintenanceId], references: [id])
  task                  PeriodicMaintenanceTask? @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model PeriodicMaintenance {
  id                        Int                          @id @unique @default(autoincrement())
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt
  from                      DateTime?
  to                        DateTime?
  currentMeterReading       Int?
  entityId                  Int?
  originId                  Int?
  verifiedAt                DateTime?
  verifiedById              Int?
  measurement               String?
  value                     Int?
  name                      String
  type                      String?
  recur                     Boolean                      @default(true)
  status                    String?
  removedById               Int?
  removedAt                 DateTime?
  dueAt                     Int?
  entity                    Entity?                      @relation(fields: [entityId], references: [id], onDelete: Cascade)
  originPeriodicMaintenance PeriodicMaintenance?         @relation("originPM", fields: [originId], references: [id], onDelete: Cascade)
  periodicMaintenance       PeriodicMaintenance[]        @relation("originPM")
  removedBy                 User?                        @relation(fields: [removedById], references: [id])
  verifiedBy                User?                        @relation("verifiedBy", fields: [verifiedById], references: [id])
  comments                  PeriodicMaintenanceComment[]
  tasks                     PeriodicMaintenanceTask[]
  notificationReminder      Reminder[]                   @relation("notificationPM")

  @@unique([entityId, originId, from, to, measurement, type])
}

model Reminder {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  type                  String?
  measurement           String?
  previousValue         Int?
  value                 Int?
  originId              Int?
  periodicMaintenanceId Int?
  origin                Reminder?            @relation("originReminder", fields: [originId], references: [id], onDelete: Cascade)
  Reminder              Reminder[]           @relation("originReminder")
  periodicMaintenance   PeriodicMaintenance? @relation("notificationPM", fields: [periodicMaintenanceId], references: [id])
}

model Repair {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  entityId          Int
  breakdownId       Int?
  name              String
  createdById       Int?
  breakdownDetailId Int?
  breakdownDetail   BreakdownDetail? @relation(fields: [breakdownDetailId], references: [id], onDelete: Cascade)
  breakdown         Breakdown?       @relation(fields: [breakdownId], references: [id], onDelete: Cascade)
  createdBy         User?            @relation(fields: [createdById], references: [id])
  entity            Entity           @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comments          RepairComment[]
}

model RepairComment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String   @default("Remark")
  description String
  repairId    Int?
  createdById Int?
  createdBy   User?    @relation(fields: [createdById], references: [id])
  repair      Repair?  @relation(fields: [repairId], references: [id])
}

model Breakdown {
  id                    Int                @id @default(autoincrement())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  entityId              Int
  type                  String
  estimatedDateOfRepair DateTime?
  createdById           Int?
  completedAt           DateTime?
  createdBy             User?              @relation(fields: [createdById], references: [id])
  entity                Entity             @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comments              BreakdownComment[]
  details               BreakdownDetail[]
  repairs               Repair[]
}

model BreakdownDetail {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  breakdownId Int
  description String
  createdById Int?
  comments    BreakdownComment[]
  breakdown   Breakdown          @relation(fields: [breakdownId], references: [id], onDelete: Cascade)
  createdBy   User?              @relation(fields: [createdById], references: [id])
  repairs     Repair[]
}

model BreakdownComment {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  type        String           @default("Remark")
  description String
  breakdownId Int?
  detailId    Int?
  createdById Int?
  breakdown   Breakdown?       @relation(fields: [breakdownId], references: [id])
  createdBy   User?            @relation(fields: [createdById], references: [id])
  detail      BreakdownDetail? @relation(fields: [detailId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  apiKeyStart String
  hash        String
  calls       Int                @default(0)
  createdById Int?
  active      Boolean            @default(true)
  expiresAt   DateTime?
  createdBy   User?              @relation(fields: [createdById], references: [id])
  permissions ApiKeyPermission[]
}

model ApiKeyPermission {
  id         Int    @id @default(autoincrement())
  apiKeyId   Int
  permission String
  apiKey     ApiKey @relation(fields: [apiKeyId], references: [id])
}

model Division {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  name        String
  createdById Int?
  active      Boolean         @default(true)
  createdBy   User?           @relation("divisionCreated", fields: [createdById], references: [id])
  assignees   DivisionUsers[]
  entity      Entity[]
}

model DivisionUsers {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  divisionId Int
  userId     Int
  removedAt  DateTime?
  division   Division  @relation(fields: [divisionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

//not using this anymore
model LocationUsers {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  removedAt  DateTime?
  locationId Int
  userId     Int
  userType   String    @default("User")
  location   Location  @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model HullType {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  active      Boolean  @default(true)
  createdById Int?
  entity      Entity[]
  createdBy   User?    @relation("hullTypeCreated", fields: [createdById], references: [id])
}

model Brand {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  name              String
  createdById       Int?
  active            Boolean             @default(true)
  createdBy         User?               @relation("brandCreated", fields: [createdById], references: [id])
  entity            Entity[]
  interServiceColor InterServiceColor[]
}

model InterServiceColor {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  removedAt   DateTime?
  typeId      Int
  brandId     Int
  measurement String
  greaterThan Int?
  lessThan    Int?
  createdById Int?
  brand       Brand     @relation(fields: [brandId], references: [id])
  createdBy   User?     @relation("interServiceColorCreated", fields: [createdById], references: [id])
  type        Type      @relation(fields: [typeId], references: [id])
}

model UserAssignment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById Int?
  active      Boolean   @default(true)
  type        String
  userId      Int?
  locationId  Int?
  zoneId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  location    Location? @relation(fields: [locationId], references: [id])
  zone        Zone?     @relation(fields: [zoneId], references: [id])
  createdBy   User?     @relation("userAssignmentCreated", fields: [createdById], references: [id])
}

//not using
enum SparePRStatus {
  Done
  Pending
}

//not using
enum RepairStatus {
  Done
  Pending
}

//not using
enum BreakdownStatus {
  Done
  Pending
  Breakdown
}

//not using
enum PeriodicMaintenanceStatus {
  Done
  Pending
  Missed
}

model ServiceRequest {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  createdById Int?
  active      Boolean  @default(true)
}

model Warehouse {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  createdById Int?
  active      Boolean  @default(true)
}

model JobCard {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  createdById Int?
  active      Boolean  @default(true)
}

model Quotation {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  createdById Int?
  active      Boolean  @default(true)
}

model WarehouseRequest {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  createdById Int?
  active      Boolean  @default(true)
}

model Catalogue {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  createdById Int?
  active      Boolean  @default(true)
}
