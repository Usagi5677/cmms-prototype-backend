// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                                   Int                             @id @default(autoincrement())
  createdAt                            DateTime                        @default(now())
  updatedAt                            DateTime                        @updatedAt
  userId                               String                          @unique
  rcno                                 Int
  fullName                             String
  email                                String
  notifications                        Notification[]
  roles                                UserRole[]
  checklistCompletions                 ChecklistItem[]
  checklistComments                    ChecklistComment[]
  roleCreated                          Role[]
  entityCreated                        Entity[]
  entityAssignment                     EntityAssignment[]
  entityPeriodicMaintenances           EntityPeriodicMaintenance[]
  entityAttachment                     EntityAttachment[]
  entityPeriodicMaintenanceTasks       EntityPeriodicMaintenanceTask[]
  entityHistory                        EntityHistory[]
  entityPeriodicMaintenanceCompletions EntityPeriodicMaintenance[]     @relation(name: "entityVerifiedBy")
  entityRepairRequestOperator          EntityRepairRequest[]           @relation(name: "operator")
  entityRepairRequestSupervisor        EntityRepairRequest[]           @relation(name: "supervisor")
  entityRepairRequestProjectManager    EntityRepairRequest[]           @relation(name: "projectManager")
  entityRepairRequestRequestedBy       EntityRepairRequest[]           @relation(name: "requestedBy")
  entityRepairRequestApprovedBy        EntityRepairRequest[]           @relation(name: "approvedBy")
  entityRepairRequestRepairedBy        EntityRepairRequest[]           @relation(name: "repairedBy")
  locationsCreated                     Location[]                      @relation(name: "locationCreated")
  periodicMaintenanceTask              PeriodicMaintenanceTask[]
  periodicMaintenanceComment           PeriodicMaintenanceComment[]
  verifiedPeriodicMaintenance          PeriodicMaintenance[]           @relation(name: "verifiedBy")
  zonesCreated                         Zone[]
  keysCreated                          ApiKey[]
  breakdownComments                    BreakdownComment[]
  repairComments                       RepairComment[]
  breakdownDetails                     BreakdownDetail[]
  repairCreated                        Repair[]
  breakdownCreated                     Breakdown[]
  sparePRCreated                       SparePR[]
  SparePRDetail                        SparePRDetail[]
  divisionCreated                      Division[]                      @relation(name: "divisionCreated")
  divisionUsers                        DivisionUsers[]
  removedChecklistTemplateItem         ChecklistTemplateItem[]
  removedPeriodicMaintenance           PeriodicMaintenance[]
  locationUsers                        LocationUsers[]
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  body      String?
  link      String?
  readAt    DateTime?
}

model Role {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  createdById     Int
  createdBy       User             @relation(fields: [createdById], references: [id])
  userRoles       UserRole[]
  permissionRoles PermissionRole[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  roleId    Int
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model PermissionRole {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  roleId     Int
  permission String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Type {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  entityType String
  name       String
  active     Boolean  @default(true)
  Entity     Entity[]
}

model Location {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  createdById   Int?
  createdBy     User?           @relation(name: "locationCreated", fields: [createdById], references: [id])
  active        Boolean         @default(true)
  zoneId        Int?
  skipFriday    Boolean?        @default(false)
  zone          Zone?           @relation(fields: [zoneId], references: [id])
  entities      Entity[]
  histories     EntityHistory[]
  locationUsers LocationUsers[]
}

model Zone {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  active      Boolean    @default(true)
  createdById Int?
  createdBy   User?      @relation(fields: [createdById], references: [id])
  locations   Location[]
}

enum SparePRStatus {
  Done
  Pending
}

enum RepairStatus {
  Done
  Pending
}

enum BreakdownStatus {
  Done
  Pending
  Breakdown
}

enum PeriodicMaintenanceStatus {
  Done
  Pending
  Missed
}

model ChecklistTemplate {
  id             Int                     @id @default(autoincrement())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  name           String?
  items          ChecklistTemplateItem[]
  type           String                  @default("Daily")
  entitiesDaily  Entity[]                @relation("entityDaily")
  entitiesWeekly Entity[]                @relation("entityWeekly")
}

model ChecklistTemplateItem {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  checklistTemplateId Int
  checklistTemplate   ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  name                String
  removedAt           DateTime?
  removedById         Int?
  removedBy           User?             @relation(fields: [removedById], references: [id])
}

model Checklist {
  id                  Int                @id @default(autoincrement())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  from                DateTime
  to                  DateTime
  type                String             @default("Daily")
  currentMeterReading Int?
  dailyUsageHours     Int?
  workingHour         Int?
  items               ChecklistItem[]
  comments            ChecklistComment[]
  attachments         EntityAttachment[]
  entity              Entity?            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId            Int?

  @@unique([entityId, from, to, type])
}

model ChecklistItem {
  id            Int                @id @default(autoincrement())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  checklistId   Int
  checklist     Checklist          @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  description   String
  completedById Int?
  completedBy   User?              @relation(fields: [completedById], references: [id])
  completedAt   DateTime?
  issues        ChecklistComment[]
}

model ChecklistComment {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  checklistId Int
  checklist   Checklist      @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  type        String         @default("Comment")
  itemId      Int?
  item        ChecklistItem? @relation(fields: [itemId], references: [id], onDelete: Cascade)
  description String
  userId      Int?
  user        User?          @relation(fields: [userId], references: [id])
}

model Entity {
  id                        Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  createdById               Int
  createdBy                 User                        @relation(fields: [createdById], references: [id])
  machineNumber             String?
  registeredDate            DateTime?
  model                     String?
  typeId                    Int?
  type                      Type?                       @relation(fields: [typeId], references: [id])
  locationId                Int?
  location                  Location?                   @relation(fields: [locationId], references: [id])
  currentRunning            Int?
  lastService               Int?
  interService              Int?
  divisionId                Int?
  division                  Division?                   @relation(fields: [divisionId], references: [id])
  engine                    String?
  brand                     String?
  status                    String?                     @default("Working")
  statusChangedAt           DateTime?
  measurement               String?                     @default("km")
  deletedAt                 DateTime?
  parentEntityId            Int?
  note                      String?
  parentEntity              Entity?                     @relation("entityLink", fields: [parentEntityId], references: [id], onDelete: Cascade)
  subEntities               Entity[]                    @relation("entityLink")
  dailyChecklistTemplateId  Int?
  dailyChecklistTemplate    ChecklistTemplate?          @relation("entityDaily", fields: [dailyChecklistTemplateId], references: [id], onDelete: SetNull)
  weeklyChecklistTemplateId Int?
  weeklyChecklistTemplate   ChecklistTemplate?          @relation("entityWeekly", fields: [weeklyChecklistTemplateId], references: [id], onDelete: SetNull)
  hullTypeId                Int?
  hullType                  HullType?                   @relation(fields: [hullTypeId], references: [id])
  dimension                 Int?
  registryNumber            String?
  checklists                Checklist[]
  assignees                 EntityAssignment[]
  periodicMaintenancePlans  EntityPeriodicMaintenance[]
  histories                 EntityHistory[]
  attachments               EntityAttachment[]
  repairsRequests           EntityRepairRequest[]
  sparePRs                  SparePR[]
  periodicMaintenances      PeriodicMaintenance[]
  breakdowns                Breakdown[]
  repairs                   Repair[]
}

model EntityAssignment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  removedAt DateTime?
  type      String    @default("User")
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  entityId  Int
  entity    Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model EntityPeriodicMaintenance {
  id                            Int                             @id @default(autoincrement())
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  entityId                      Int
  entity                        Entity                          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  title                         String
  measurement                   String?
  value                         Int?
  startDate                     DateTime?
  completedById                 Int?
  completedBy                   User?                           @relation(fields: [completedById], references: [id])
  completedAt                   DateTime?
  status                        PeriodicMaintenanceStatus       @default(Pending)
  verifiedById                  Int?
  verifiedBy                    User?                           @relation(name: "entityVerifiedBy", fields: [verifiedById], references: [id])
  verifiedAt                    DateTime?
  entityPeriodicMaintenanceTask EntityPeriodicMaintenanceTask[]
}

model EntityAttachment {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  userId             Int
  user               User       @relation(fields: [userId], references: [id])
  entityId           Int
  entity             Entity     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  checklistId        Int?
  checklist          Checklist? @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  description        String
  mimeType           String?
  originalName       String?
  sharepointFileName String?
  mode               String     @default("Public")
}

model EntityPeriodicMaintenanceTask {
  id                    Int                             @id @default(autoincrement())
  periodicMaintenanceId Int
  periodicMaintenance   EntityPeriodicMaintenance       @relation(fields: [periodicMaintenanceId], references: [id], onDelete: Cascade)
  parentTaskId          Int?
  name                  String
  completedById         Int?
  completedBy           User?                           @relation(fields: [completedById], references: [id])
  completedAt           DateTime?
  parentTask            EntityPeriodicMaintenanceTask?  @relation("entityTaskLink", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks              EntityPeriodicMaintenanceTask[] @relation("entityTaskLink")
}

model EntityHistory {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  entityId      Int
  entity        Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  completedById Int?
  completedBy   User?     @relation(fields: [completedById], references: [id])
  type          String
  description   String
  entityStatus  String?
  entityType    String?
  workingHour   Float?
  idleHour      Float?
  breakdownHour Float?
  locationId    Int?
  location      Location? @relation(fields: [locationId], references: [id])
}

model EntityRepairRequest {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  entityId         Int
  entity           Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  internal         Boolean   @default(true)
  projectName      String?
  location         String?
  reason           String?
  additionalInfo   String?
  attendInfo       String?
  operatorId       Int?
  repairedById     Int?
  repairedBy       User?     @relation("repairedBy", fields: [repairedById], references: [id])
  repairedAt       DateTime?
  operator         User?     @relation("operator", fields: [operatorId], references: [id])
  supervisorId     Int?
  supervisor       User?     @relation("supervisor", fields: [supervisorId], references: [id])
  projectManagerId Int?
  projectManager   User?     @relation("projectManager", fields: [projectManagerId], references: [id])
  requestorId      Int?
  requestedBy      User?     @relation("requestedBy", fields: [requestorId], references: [id])
  approverId       Int?
  approvedBy       User?     @relation("approvedBy", fields: [approverId], references: [id])
  approvedAt       DateTime?
}

model SparePR {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  entityId       Int
  entity         Entity          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  requestedDate  DateTime?
  completedAt    DateTime?
  name           String
  createdById    Int?
  createdBy      User?           @relation(fields: [createdById], references: [id])
  sparePRDetails SparePRDetail[]
}

model SparePRDetail {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sparePRId   Int
  sparePR     SparePR  @relation(fields: [sparePRId], references: [id], onDelete: Cascade)
  description String
  createdById Int?
  createdBy   User?    @relation(fields: [createdById], references: [id])
}

model PeriodicMaintenanceTask {
  id                    Int                          @id @default(autoincrement())
  periodicMaintenanceId Int
  periodicMaintenance   PeriodicMaintenance          @relation(fields: [periodicMaintenanceId], references: [id], onDelete: Cascade)
  parentTaskId          Int?
  name                  String
  completedById         Int?
  completedBy           User?                        @relation(fields: [completedById], references: [id])
  completedAt           DateTime?
  parentTask            PeriodicMaintenanceTask?     @relation("taskLink", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks              PeriodicMaintenanceTask[]    @relation("taskLink")
  remarks               PeriodicMaintenanceComment[]
}

model PeriodicMaintenanceComment {
  id                    Int                      @id @default(autoincrement())
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  taskId                Int?
  task                  PeriodicMaintenanceTask? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  type                  String                   @default("Remark")
  description           String
  createdById           Int?
  createdBy             User?                    @relation(fields: [createdById], references: [id])
  periodicMaintenance   PeriodicMaintenance?     @relation(fields: [periodicMaintenanceId], references: [id])
  periodicMaintenanceId Int?
}

model PeriodicMaintenance {
  id                        Int                          @id @unique @default(autoincrement())
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt
  from                      DateTime?
  to                        DateTime?
  name                      String
  originId                  Int?
  originPeriodicMaintenance PeriodicMaintenance?         @relation("originPM", fields: [originId], references: [id], onDelete: Cascade)
  measurement               String?
  value                     Int?
  currentMeterReading       Int?
  type                      String?
  verifiedById              Int?
  verifiedBy                User?                        @relation(name: "verifiedBy", fields: [verifiedById], references: [id])
  verifiedAt                DateTime?
  tasks                     PeriodicMaintenanceTask[]
  comments                  PeriodicMaintenanceComment[]
  entity                    Entity?                      @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId                  Int?
  status                    String?
  recur                     Boolean                      @default(true)
  removedAt                 DateTime?
  removedById               Int?
  removedBy                 User?                        @relation(fields: [removedById], references: [id])
  periodicMaintenance       PeriodicMaintenance[]        @relation("originPM")
  notificationReminder      Reminder[]                   @relation("notificationPM")

  @@unique([entityId, originId, from, to, measurement, type])
}

model Reminder {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  originId              Int?
  origin                Reminder?            @relation("originReminder", fields: [originId], references: [id], onDelete: Cascade)
  type                  String?
  measurement           String?
  previousValue         Int?
  value                 Int?
  periodicMaintenanceId Int?
  periodicMaintenance   PeriodicMaintenance? @relation("notificationPM", fields: [periodicMaintenanceId], references: [id])
  Reminder              Reminder[]           @relation("originReminder")
}

model Repair {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  entityId          Int
  breakdownId       Int?
  breakdownDetailId Int?
  name              String
  createdById       Int?
  createdBy         User?            @relation(fields: [createdById], references: [id])
  entity            Entity?          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  breakdown         Breakdown?       @relation(fields: [breakdownId], references: [id], onDelete: Cascade)
  breakdownDetail   BreakdownDetail? @relation(fields: [breakdownDetailId], references: [id], onDelete: Cascade)
  comments          RepairComment[]
}

model RepairComment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String   @default("Remark")
  description String
  repairId    Int?
  repair      Repair?  @relation(fields: [repairId], references: [id])
  createdById Int?
  createdBy   User?    @relation(fields: [createdById], references: [id])
}

model Breakdown {
  id                    Int                @id @default(autoincrement())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  entityId              Int
  type                  String
  estimatedDateOfRepair DateTime?
  completedAt           DateTime?
  entity                Entity?            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  createdById           Int?
  createdBy             User?              @relation(fields: [createdById], references: [id])
  details               BreakdownDetail[]
  comments              BreakdownComment[]
  repairs               Repair[]
}

model BreakdownDetail {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  breakdownId Int
  breakdown   Breakdown          @relation(fields: [breakdownId], references: [id], onDelete: Cascade)
  description String
  createdById Int?
  createdBy   User?              @relation(fields: [createdById], references: [id])
  comments    BreakdownComment[]
  repairs     Repair[]
}

model BreakdownComment {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  type        String           @default("Remark")
  description String
  breakdownId Int?
  breakdown   Breakdown?       @relation(fields: [breakdownId], references: [id])
  detailId    Int?
  detail      BreakdownDetail? @relation(fields: [detailId], references: [id], onDelete: Cascade)
  createdById Int?
  createdBy   User?            @relation(fields: [createdById], references: [id])
}

model ApiKey {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  apiKeyStart String
  hash        String
  calls       Int                @default(0)
  permissions ApiKeyPermission[]
  createdById Int?
  createdBy   User?              @relation(fields: [createdById], references: [id])
  active      Boolean            @default(true)
  expiresAt   DateTime?
}

model ApiKeyPermission {
  id         Int    @id @default(autoincrement())
  apiKeyId   Int
  apiKey     ApiKey @relation(fields: [apiKeyId], references: [id])
  permission String
}

model Division {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  name        String
  createdById Int?
  createdBy   User?           @relation(name: "divisionCreated", fields: [createdById], references: [id])
  active      Boolean         @default(true)
  assignees   DivisionUsers[]
  entity      Entity[]
}

model DivisionUsers {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  removedAt  DateTime?
  divisionId Int
  userId     Int
  division   Division? @relation(fields: [divisionId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model LocationUsers {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  removedAt  DateTime?
  locationId Int
  userId     Int
  location   Location? @relation(fields: [locationId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model HullType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(true)
  entity    Entity[]
}
