// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                                   Int                             @id @default(autoincrement())
  createdAt                            DateTime                        @default(now())
  updatedAt                            DateTime                        @updatedAt
  userId                               String                          @unique
  rcno                                 Int
  fullName                             String
  email                                String
  locationId                           Int?
  location                             Location?                       @relation(fields: [locationId], references: [id])
  notifications                        Notification[]
  roles                                UserRole[]
  checklistCompletions                 ChecklistItem[]
  checklistComments                    ChecklistComment[]
  roleCreated                          Role[]
  entityCreated                        Entity[]
  entityDeleted                        Entity[]                        @relation(name: "deletedByE")
  entityAssignment                     EntityAssignment[]
  entityPeriodicMaintenances           EntityPeriodicMaintenance[]
  entityAttachment                     EntityAttachment[]
  entityPeriodicMaintenanceTasks       EntityPeriodicMaintenanceTask[]
  entityHistory                        EntityHistory[]
  entityBreakdown                      EntityBreakdown[]
  entitySparePR                        EntitySparePR[]
  entityPeriodicMaintenanceCompletions EntityPeriodicMaintenance[]     @relation(name: "entityVerifiedBy")
  entityRepairRequestOperator          EntityRepairRequest[]           @relation(name: "operator")
  entityRepairRequestSupervisor        EntityRepairRequest[]           @relation(name: "supervisor")
  entityRepairRequestProjectManager    EntityRepairRequest[]           @relation(name: "projectManager")
  entityRepairRequestRequestedBy       EntityRepairRequest[]           @relation(name: "requestedBy")
  entityRepairRequestApprovedBy        EntityRepairRequest[]           @relation(name: "approvedBy")
  entityRepairRequestRepairedBy        EntityRepairRequest[]           @relation(name: "repairedBy")
  locationsCreated                     Location[]                      @relation(name: "locationCreated")
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  body      String?
  link      String?
  readAt    DateTime?
}

model Role {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  createdById     Int
  createdBy       User             @relation(fields: [createdById], references: [id])
  userRoles       UserRole[]
  permissionRoles PermissionRole[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  roleId    Int
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model PermissionRole {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  roleId     Int
  permission String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Type {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  entityType String
  name       String
  active     Boolean  @default(true)
  Entity     Entity[]
}

model Location {
  id             Int                   @id @default(autoincrement())
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  name           String
  createdById    Int?
  createdBy      User?                 @relation(name: "locationCreated", fields: [createdById], references: [id])
  active         Boolean               @default(true)
  entities       Entity[]
  histories      EntityHistory[]
  repairRequests EntityRepairRequest[]
  user           User[]
}

enum SparePRStatus {
  Done
  Pending
}

enum RepairStatus {
  Done
  Pending
}

enum BreakdownStatus {
  Done
  Pending
  Breakdown
}

enum PeriodicMaintenanceStatus {
  Done
  Pending
  Missed
}

model ChecklistTemplate {
  id             Int                     @id @default(autoincrement())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  name           String?
  items          ChecklistTemplateItem[]
  type           String                  @default("Daily")
  entitiesDaily  Entity[]                @relation("entityDaily")
  entitiesWeekly Entity[]                @relation("entityWeekly")
}

model ChecklistTemplateItem {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  checklistTemplateId Int
  checklistTemplate   ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  name                String
}

model Checklist {
  id                  Int                @id @default(autoincrement())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  from                DateTime
  to                  DateTime
  type                String             @default("Daily")
  currentMeterReading Int?
  workingHour         Int?
  items               ChecklistItem[]
  comments            ChecklistComment[]
  attachments         EntityAttachment[]
  entity              Entity?            @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId            Int?

  @@unique([entityId, from, to, type])
}

model ChecklistItem {
  id            Int                @id @default(autoincrement())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  checklistId   Int
  checklist     Checklist          @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  description   String
  completedById Int?
  completedBy   User?              @relation(fields: [completedById], references: [id])
  completedAt   DateTime?
  issues        ChecklistComment[]
}

model ChecklistComment {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  checklistId Int
  checklist   Checklist      @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  type        String         @default("Comment")
  itemId      Int?
  item        ChecklistItem? @relation(fields: [itemId], references: [id], onDelete: Cascade)
  description String
  userId      Int?
  user        User?          @relation(fields: [userId], references: [id])
}

model Entity {
  id                        Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  createdById               Int
  createdBy                 User                        @relation(fields: [createdById], references: [id])
  machineNumber             String?
  registeredDate            DateTime?
  model                     String?
  typeId                    Int?
  type                      Type?                       @relation(fields: [typeId], references: [id])
  zone                      String?
  locationId                Int?
  location                  Location?                   @relation(fields: [locationId], references: [id])
  currentRunning            Int?
  lastService               Int?
  department                String?
  engine                    String?
  brand                     String?
  status                    EntityStatus                @default(Working)
  statusChangedAt           DateTime?
  measurement               String?                     @default("km")
  isDeleted                 Boolean?
  deletedAt                 DateTime?
  deletedById               Int?
  deletedBy                 User?                       @relation(name: "deletedByE", fields: [deletedById], references: [id])
  dailyChecklistTemplateId  Int?
  dailyChecklistTemplate    ChecklistTemplate?          @relation("entityDaily", fields: [dailyChecklistTemplateId], references: [id], onDelete: SetNull)
  weeklyChecklistTemplateId Int?
  weeklyChecklistTemplate   ChecklistTemplate?          @relation("entityWeekly", fields: [weeklyChecklistTemplateId], references: [id], onDelete: SetNull)
  checklists                Checklist[]
  assignees                 EntityAssignment[]
  periodicMaintenancePlans  EntityPeriodicMaintenance[]
  histories                 EntityHistory[]
  attachments               EntityAttachment[]
  repairs                   EntityRepairRequest[]
  breakdowns                EntityBreakdown[]
  sparePRs                  EntitySparePR[]
}

enum EntityStatus {
  Working
  Idle
  Breakdown
  Dispose
}

model EntityAssignment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  removedAt DateTime?
  type      String    @default("User")
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  entityId  Int
  entity    Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model EntityPeriodicMaintenance {
  id                            Int                             @id @default(autoincrement())
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  entityId                      Int
  entity                        Entity                          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  title                         String
  measurement                   String?
  value                         Int?
  startDate                     DateTime?
  completedById                 Int?
  completedBy                   User?                           @relation(fields: [completedById], references: [id])
  completedAt                   DateTime?
  status                        PeriodicMaintenanceStatus       @default(Pending)
  verifiedById                  Int?
  verifiedBy                    User?                           @relation(name: "entityVerifiedBy", fields: [verifiedById], references: [id])
  verifiedAt                    DateTime?
  entityPeriodicMaintenanceTask EntityPeriodicMaintenanceTask[]
}

model EntityAttachment {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  userId             Int
  user               User       @relation(fields: [userId], references: [id])
  entityId           Int
  entity             Entity     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  checklistId        Int?
  checklist          Checklist? @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  description        String
  mimeType           String?
  originalName       String?
  sharepointFileName String?
  mode               String     @default("Public")
}

model EntityPeriodicMaintenanceTask {
  id                    Int                             @id @default(autoincrement())
  periodicMaintenanceId Int
  periodicMaintenance   EntityPeriodicMaintenance       @relation(fields: [periodicMaintenanceId], references: [id], onDelete: Cascade)
  parentTaskId          Int?
  name                  String
  completedById         Int?
  completedBy           User?                           @relation(fields: [completedById], references: [id])
  completedAt           DateTime?
  parentTask            EntityPeriodicMaintenanceTask?  @relation("entityTaskLink", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks              EntityPeriodicMaintenanceTask[] @relation("entityTaskLink")
}

model EntityHistory {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  entityId      Int
  entity        Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  completedById Int?
  completedBy   User?         @relation(fields: [completedById], references: [id])
  type          String
  description   String
  entityStatus  EntityStatus?
  entityType    String?
  workingHour   Float?
  idleHour      Float?
  breakdownHour Float?
  locationId    Int?
  location      Location?     @relation(fields: [locationId], references: [id])
}

model EntityRepairRequest {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  entityId         Int
  entity           Entity    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  internal         Boolean   @default(true)
  projectName      String?
  locationId       Int?
  location         Location? @relation(fields: [locationId], references: [id])
  reason           String?
  additionalInfo   String?
  attendInfo       String?
  operatorId       Int?
  repairedById     Int?
  repairedBy       User?     @relation("repairedBy", fields: [repairedById], references: [id])
  repairedAt       DateTime?
  operator         User?     @relation("operator", fields: [operatorId], references: [id])
  supervisorId     Int?
  supervisor       User?     @relation("supervisor", fields: [supervisorId], references: [id])
  projectManagerId Int?
  projectManager   User?     @relation("projectManager", fields: [projectManagerId], references: [id])
  requestorId      Int?
  requestedBy      User?     @relation("requestedBy", fields: [requestorId], references: [id])
  approverId       Int?
  approvedBy       User?     @relation("approvedBy", fields: [approverId], references: [id])
  approvedAt       DateTime?
}

model EntityBreakdown {
  id                    Int             @id @default(autoincrement())
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  entityId              Int
  entity                Entity          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  title                 String
  description           String
  completedById         Int?
  completedBy           User?           @relation(fields: [completedById], references: [id])
  completedAt           DateTime?
  estimatedDateOfRepair DateTime?
  status                BreakdownStatus @default(Breakdown)
}

model EntitySparePR {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  entityId      Int
  entity        Entity        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  requestedDate DateTime
  title         String
  description   String
  completedById Int?
  completedBy   User?         @relation(fields: [completedById], references: [id])
  completedAt   DateTime?
  status        SparePRStatus @default(Pending)
}
