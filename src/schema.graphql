# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AllEntityUsageHistory {
  breakdownHour: Float
  breakdownPercentage: Float

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  date: Date!
  id: Int!
  idleHour: Float
  idlePercentage: Float
  totalHour: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Float
  workingPercentage: Float
}

type BreakdownNotif {
  count: Int

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

"""Breakdown statuses."""
enum BreakdownStatus {
  Breakdown
  Done
  Pending
}

input ChangeChecklistTemplateInput {
  entityId: Int!
  newChecklistId: Int!
}

type Checklist {
  attachments: [EntityAttachment!]!
  comments: [ChecklistComment!]!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  currentMeterReading: Int
  entity: [Entity!]
  from: Date!
  id: Int!
  items: [ChecklistItem!]!
  to: Date!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Int
}

type ChecklistComment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  id: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
}

input ChecklistInput {
  date: Date!
  entityId: Int!
  type: String!
}

type ChecklistItem {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  id: Int!
  issues: [ChecklistComment!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ChecklistSummary {
  attachments: [EntityAttachment!]!
  comments: [ChecklistComment!]!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  currentMeterReading: Int
  entity: [Entity!]
  from: Date!
  hasComments: Boolean!
  hasIssues: Boolean!
  id: Int!
  itemCompletion: String!
  items: [ChecklistItem!]!
  to: Date!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Int
}

input ChecklistSummaryInput {
  entityId: Int!
  from: Date!
  to: Date!
  type: String!
}

type ChecklistTemplate {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entitiesDaily: [Entity!]
  entitiesWeekly: [Entity!]
  id: Int!
  items: [ChecklistTemplateItem!]!
  name: String
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ChecklistTemplateConnection {
  edges: [ChecklistTemplateEdge!]
  pageInfo: ChecklistTemplatePageInfo
}

type ChecklistTemplateEdge {
  cursor: String
  node: ChecklistTemplate
}

type ChecklistTemplateItem {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ChecklistTemplatePageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input CreateChecklistTemplateInput {
  items: [String!]!
  name: String!
  type: String!
}

input CreateLocationInput {
  name: String!
}

input CreateTypeInput {
  entityType: String!
  name: String!
}

"""Date custom scalar type"""
scalar Date

type Entity {
  assignees: [EntityAssign!]
  brand: String
  breakdowns: [EntityBreakdown!]
  checklistItems: [ChecklistItem!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User
  currentRunning: Int
  deletedAt: Date
  department: String
  engine: String
  histories: [EntityHistory!]
  id: Int!
  isDeleted: Boolean
  lastService: Int
  location: Location
  machineNumber: String
  measurement: String
  model: String
  periodicMaintenancePlans: [EntityPeriodicMaintenance!]
  registeredDate: Date
  repairs: [EntityRepairRequest!]
  sparePRs: [EntitySparePR!]
  status: EntityStatus
  statusChangedAt: Date
  type: Type

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  zone: String
}

type EntityAssign {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entity: Entity
  entityId: Int!
  id: Int!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
  userId: Int!
}

type EntityAttachment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  entityId: Int!
  id: Int!
  mimeType: String
  mode: String!
  originalName: String
  sharepointFileName: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
}

type EntityAttachmentEdge {
  cursor: String
  node: EntityAttachment
}

type EntityAttachmentPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityBreakdown {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  entityId: Int!
  estimatedDateOfRepair: Date
  id: Int!
  status: BreakdownStatus!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type EntityBreakdownEdge {
  cursor: String
  node: EntityBreakdown
}

type EntityBreakdownPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input EntityChecklistTemplateInput {
  entityId: Int!
  type: String!
}

type EntityEdge {
  cursor: String
  node: Entity
}

type EntityHistory {
  breakdownHour: Float
  completedBy: User
  completedById: Int

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  entityId: Int
  entityStatus: EntityStatus
  entityType: String
  id: Int!
  idleHour: Float
  location: Location
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Float
}

type EntityHistoryEdge {
  cursor: String
  node: EntityHistory
}

type EntityHistoryPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityPMTask {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String
  parentTask: EntityPMTask
  parentTaskId: Int
  periodicMaintenance: EntityPeriodicMaintenance!
  periodicMaintenanceId: Int
  subTasks: [EntityPMTask!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type EntityPMTaskEdge {
  cursor: String
  node: EntityPMTask
}

type EntityPMTaskPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityPeriodicMaintenance {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entity: Entity!
  entityId: Int!
  entityPeriodicMaintenanceTask: [EntityPMTask!]
  id: Int!
  measurement: String
  startDate: Date
  status: PeriodicMaintenanceStatus!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  value: Int
  verifiedAt: Date
  verifiedBy: User
}

type EntityPeriodicMaintenanceEdge {
  cursor: String
  node: EntityPeriodicMaintenance
}

type EntityPeriodicMaintenancePageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityRepairRequest {
  additionalInfo: String
  approvedAt: Date
  approvedBy: User
  approverId: Int
  attendInfo: String

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entityId: Int!
  id: Int!
  internal: Boolean
  location: String
  operator: User
  operatorId: Int
  projectManager: User
  projectManagerId: Int
  projectName: String
  reason: String
  repairedAt: Date
  repairedBy: User
  repairedById: Int
  requestedBy: User
  supervisor: User
  supervisorId: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type EntityRepairRequestEdge {
  cursor: String
  node: EntityRepairRequest
}

type EntityRepairRequestPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntitySparePR {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  entityId: Int!
  id: Int!
  requestedDate: Date!
  status: SparePRStatus!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type EntitySparePREdge {
  cursor: String
  node: EntitySparePR
}

type EntitySparePRPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Entity statuses."""
enum EntityStatus {
  Breakdown
  Dispose
  Idle
  Working
}

type EntityUsageHistory {
  breakdownHour: Float

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  date: Date!
  id: Int!
  idleHour: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Float
}

type Location {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type LocationEdge {
  cursor: String
  node: Location
}

type LocationPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Mutation {
  addAppUser(roles: [Int!]!, userId: String!): String!
  addChecklistComment(checklistId: Int!, comment: String!): String!
  addChecklistIssue(checklistId: Int!, comment: String!, itemId: Int!): String!
  addChecklistTemplateItem(entityId: Int, id: Int!, name: String!): String!
  addEntityBreakdown(description: String!, entityId: Int!, title: String!): String!
  addEntityPeriodicMaintenance(entityId: Int!, measurement: String!, startDate: Date!, tasks: [String!], title: String!, value: Int!): String!
  addEntityRepairRequest(additionalInfo: String, attendInfo: String, entityId: Int!, internal: Boolean, location: String, operatorId: Int, projectManagerId: Int, projectName: String, reason: String, supervisorId: Int): String!
  addEntitySparePR(description: String!, entityId: Int!, requestedDate: Date!, title: String!): String!
  addRole(name: String!): String!
  addUserRole(roles: [Int!]!, userId: Int!): String!
  assignPermission(permissions: [String!]!, roleId: Int!): String!
  assignUserToEntity(entityId: Int!, type: String!, userIds: [Int!]!): String!
  changeChecklistTemplate(input: ChangeChecklistTemplateInput!): String!
  createChecklistTemplate(createChecklistTemplateInput: CreateChecklistTemplateInput!): String!
  createEntity(brand: String, currentRunning: Int, department: String, engine: String, lastService: Int, locationId: Int, machineNumber: String, measurement: String, model: String, registeredDate: Date, typeId: Int, zone: String): String!
  createEntityPeriodicMaintenanceTask(name: String!, parentTaskId: Int, periodicMaintenanceId: Int!): String!
  createLocation(createLocationInput: CreateLocationInput!): String!
  createType(createTypeInput: CreateTypeInput!): String!
  deleteEntityBreakdown(id: Int!): String!
  deleteEntityPMTask(id: Int!): String!
  deleteEntityPeriodicMaintenance(id: Int!): String!
  deleteEntityRepairRequest(id: Int!): String!
  deleteEntitySparePR(id: Int!): String!
  editEntity(brand: String, department: String, engine: String, id: Int!, locationId: Int, machineNumber: String, measurement: String, model: String, registeredDate: Date, typeId: Int, zone: String): String!
  editEntityAttachment(description: String!, id: Int!): String!
  editEntityBreakdown(description: String!, estimatedDateOfRepair: Date!, id: Int!, title: String!): String!
  editEntityPeriodicMaintenance(id: Int!, measurement: String!, startDate: Date!, title: String!, value: Int!): String!
  editEntityRepairRequest(additionalInfo: String, attendInfo: String, id: Int!, internal: Boolean, location: String, operatorId: Int, projectManagerId: Int, projectName: String, reason: String, supervisorId: Int): String!
  editEntitySparePR(description: String!, id: Int!, requestedDate: Date!, title: String!): String!
  editRole(id: Int!, name: String!): String!
  editUserLocation(id: Int!, locationId: Int): String!
  flushRedis: String!
  readAllNotifications: Boolean!
  readNotification(notificationId: Int!): String!
  removeChecklistComment(id: Int!): String!
  removeChecklistTemplate(id: Int!): String!
  removeChecklistTemplateItem(entityId: Int, id: Int!, templateId: Int): String!
  removeEntity(entityId: Int!): String!
  removeEntityAttachment(id: Int!): String!
  removeLocation(id: Int!): String!
  removeRole(id: Int!): String!
  removeType(id: Int!): String!
  removeUserRole(roleId: Int!, userId: Int!): String!
  setEntityBreakdownStatus(id: Int!, status: BreakdownStatus!): String!
  setEntityPeriodicMaintenanceStatus(id: Int!, status: PeriodicMaintenanceStatus!): String!
  setEntitySparePRStatus(id: Int!, status: SparePRStatus!): String!
  setEntityStatus(entityId: Int!, status: EntityStatus!): String!
  toggleApproveEntityRepairRequest(approve: Boolean!, id: Int!): String!
  toggleChecklistItem(complete: Boolean!, id: Int!): String!
  toggleCompleteEntityRepairRequest(complete: Boolean!, id: Int!): String!
  toggleEntityPMTask(complete: Boolean!, id: Int!): String!
  togglePermission(complete: Boolean!, permission: String!, roleId: Int!): String!
  toggleVerifyEntityPeriodicMaintenance(id: Int!, verify: Boolean!): String!
  unassignUserFromEntity(entityId: Int!, type: String!, userId: Int!): String!

  """
  Not to be called from frontend. Meant to be used when templates of entities are updated manually in the DB.
  """
  updateAllEntityChecklists: String!
  updateChecklistTemplate(updateChecklistTemplateInput: UpdateChecklistTemplateInput!): String!
  updateLocation(updateLocationInput: UpdateLocationInput!): String!
  updateReading(id: Int!, reading: Int!): String!
  updateType(updateTypeInput: UpdateTypeInput!): String!
  updateWorkingHours(id: Int!, newHrs: Int!): String!
}

type Notification {
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  link: String
  readAt: Date

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: Int!
}

type PMTaskStatusCount {
  done: Int
  pending: Int
}

type PaginatedEntity {
  edges: [EntityEdge!]
  pageInfo: EntityPageInfo
}

type PaginatedEntityAttachment {
  edges: [EntityAttachmentEdge!]
  pageInfo: EntityAttachmentPageInfo
}

type PaginatedEntityBreakdown {
  edges: [EntityBreakdownEdge!]
  pageInfo: EntityBreakdownPageInfo
}

type PaginatedEntityHistory {
  edges: [EntityHistoryEdge!]
  pageInfo: EntityHistoryPageInfo
}

type PaginatedEntityPeriodicMaintenance {
  edges: [EntityPeriodicMaintenanceEdge!]
  pageInfo: EntityPeriodicMaintenancePageInfo
}

type PaginatedEntityPeriodicMaintenanceTask {
  edges: [EntityPMTaskEdge!]
  pageInfo: EntityPMTaskPageInfo
}

type PaginatedEntityRepair {
  edges: [EntityRepairRequestEdge!]
  pageInfo: EntityRepairRequestPageInfo
}

type PaginatedEntitySparePR {
  edges: [EntitySparePREdge!]
  pageInfo: EntitySparePRPageInfo
}

type PaginatedLocation {
  edges: [LocationEdge!]
  pageInfo: LocationPageInfo
}

type PaginatedPermissionRole {
  edges: [RolesEdge!]
  pageInfo: RolesPageInfo
}

type PaginatedType {
  edges: [TypeEdge!]
  pageInfo: TypePageInfo
}

type PaginatedUsers {
  edges: [UserEdge!]
  pageInfo: UserPageInfo
}

"""Periodic Maintenance statuses."""
enum PeriodicMaintenanceStatus {
  Done
  Missed
  Pending
}

type PermissionRole {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  permission: String!
  roleId: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type PermissionWithDescription {
  description: String!
  name: String!
  type: String!
}

type Profile {
  department: String!
  division: String!
  email: String
  fullName: String!
  post: String!
  rcno: Int!
  section: String
  telExtension: Int
  telMobile: Int
  telOffice: Int
  unit: String
  userId: String!
}

type Query {
  allEntityBreakdownCount: entityBreakdownCount!
  allEntityPMStatusCount: maintenanceStatusCount!
  allEntityPMTaskStatusCount(assignedToId: Int): PMTaskStatusCount!
  allEntityStatusCount(entityType: String, isAssigned: Boolean): entityStatusCount!
  allEntityUsageHistory(from: Date!, to: Date!): [AllEntityUsageHistory!]!
  appUsers: [User!]!
  assignedEntities(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    createdById: Int
    createdByUserId: String
    department: [String!]
    entityType: String

    """Paginate first"""
    first: Int
    isAssigned: Boolean

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    self: Boolean
    status: EntityStatus
    typeId: Int
  ): PaginatedEntity!
  breakdownCount: BreakdownNotif!
  checklist(input: ChecklistInput!): Checklist
  checklistSummary(input: ChecklistSummaryInput!): [ChecklistSummary!]!
  checklistTemplate(id: Int!): ChecklistTemplate!
  checklistTemplates(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
    type: String
  ): ChecklistTemplateConnection!
  entityAttachment(id: Int!): EntityAttachment!
  entityAttachments(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedEntityAttachment!
  entityChecklistTemplate(input: EntityChecklistTemplateInput!): ChecklistTemplate!
  getAllAssignedEntity(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    createdById: Int
    createdByUserId: String
    department: [String!]
    entityType: String

    """Paginate first"""
    first: Int
    isAssigned: Boolean

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    self: Boolean
    status: EntityStatus
    typeId: Int
  ): PaginatedEntity!
  getAllBreakdownOfEntity(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedEntityBreakdown!
  getAllEntity(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    createdById: Int
    createdByUserId: String
    department: [String!]
    entityType: String

    """Paginate first"""
    first: Int
    isAssigned: Boolean

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    self: Boolean
    status: EntityStatus
    typeId: Int
  ): PaginatedEntity!
  getAllEntityChecklistAndPMSummary: entityChecklistAndPMSummary!
  getAllEntityPeriodicMaintenance(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    location: [String!]
    search: String
    status: PeriodicMaintenanceStatus
  ): PaginatedEntityPeriodicMaintenance!
  getAllEntityPeriodicMaintenanceTask(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    location: [String!]
    search: String
    status: PeriodicMaintenanceStatus
  ): PaginatedEntityPeriodicMaintenanceTask!
  getAllEntityUtilization(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    createdById: Int
    createdByUserId: String
    department: [String!]
    entityType: String

    """Paginate first"""
    first: Int
    isAssigned: Boolean

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    self: Boolean
    status: EntityStatus
    typeId: Int
  ): PaginatedEntity!
  getAllHistoryOfEntity(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int!

    """Paginate first"""
    first: Int
    from: Date

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    to: Date
  ): PaginatedEntityHistory!
  getAllPeriodicMaintenanceOfEntity(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    location: [String!]
    search: String
    status: PeriodicMaintenanceStatus
  ): PaginatedEntityPeriodicMaintenance!
  getAllRepairRequestOfEntity(
    """Paginate after opaque cursor"""
    after: String
    approve: Boolean

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedEntityRepair!
  getAllRoles(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    createdById: Int
    createdByUserId: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedPermissionRole!
  getAllSparePROfEntity(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedEntitySparePR!
  getAllUsers(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedUsers!
  getEntityLatestAttachment(entityId: Int!): EntityAttachment!
  getRoleWithPermission(roleId: Int!): Roles!
  getRoles: [Roles!]!
  getSingleEntity(entityId: Int!): Entity!
  getUsersWithPermission(permissions: [String!]!): [User!]!
  location(id: Int!): Location!
  locations(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
  ): PaginatedLocation!
  me: UserWithRoles!
  notifications: [Notification!]!
  permissions: [PermissionWithDescription!]!
  profile: Profile!
  redisGet(key: String!): String
  redisKeys: [String!]!
  searchAPSUsers(query: String!): [User!]!
  searchEntity(entityType: String, limit: Int, query: String!): [Entity!]!
  singleEntityUsageHistory(entityId: Int!, from: Date!, to: Date!): [EntityUsageHistory!]!
  type(id: Int!): Type!
  types(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityType: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
  ): PaginatedType!
}

type Roles {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  id: Int!
  name: String!
  permissionRoles: [PermissionRole!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type RolesEdge {
  cursor: String
  node: Roles
}

type RolesPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Spare pr statuses."""
enum SparePRStatus {
  Done
  Pending
}

type Subscription {
  notificationCreated(userId: Int!): Notification!
}

type Type {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entityType: String!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type TypeEdge {
  cursor: String
  node: Type
}

type TypePageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input UpdateChecklistTemplateInput {
  id: Int!
  items: [String!]
  name: String
  type: String
}

input UpdateLocationInput {
  id: Int!
  name: String
}

input UpdateTypeInput {
  entityType: String
  id: Int!
  name: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String!
  fullName: String!
  id: Int!
  location: Location
  permissions: [String!]
  rcno: Int!
  roles: [UserRoles!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userId: String!
}

type UserEdge {
  cursor: String
  node: User
}

type UserPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type UserRoles {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  role: Roles
  roleId: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userId: Int!
}

type UserWithRoles {
  email: String!
  entityAssignment: [EntityAssign!]
  fullName: String!
  id: Int!
  location: Location
  rcno: Int!
  roles: [UserRoles!]
  userId: String!
}

type entityBreakdownCount {
  machine: Int
  vehicle: Int
  vessel: Int
}

type entityChecklistAndPMSummary {
  checklist: [String!]
  machineChecklistComplete: Boolean
  machineTaskComplete: Boolean
  pm: [String!]
  vehicleChecklistComplete: Boolean
  vehicleTaskComplete: Boolean
  vesselChecklistComplete: Boolean
  vesselTaskComplete: Boolean
}

type entityStatusCount {
  breakdown: Int
  dispose: Int
  idle: Int
  working: Int
}

type maintenanceStatusCount {
  done: Int
  missed: Int
  pending: Int
}
