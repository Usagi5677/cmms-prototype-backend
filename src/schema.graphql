# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AllEntityUsageHistory {
  breakdownHour: Int
  breakdownPercentage: Float

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  date: Date!
  id: Int!
  idleHour: Int
  idlePercentage: Float
  machineNumber: String
  na: Int
  totalHour: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Int
  workingPercentage: Float
}

type ApiKey {
  active: Boolean!
  apiKeyStart: String!
  calls: Int!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User
  expiresAt: Date
  id: Int!
  name: String!
  permissions: [ApiKeyPermission!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ApiKeyEdge {
  cursor: String
  node: ApiKey
}

type ApiKeyPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type ApiKeyPermission {
  permission: String!
}

type Breakdown {
  comments: [BreakdownComment!]
  completedAt: Date

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  details: [BreakdownDetail!]!
  entity: Entity!
  estimatedDateOfRepair: Date
  id: Int!
  repairs: [Repair!]
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type BreakdownComment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User
  description: String!
  id: Int!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type BreakdownDetail {
  breakdown: Breakdown!
  comments: [BreakdownComment!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  description: String!
  entity: Entity!
  id: Int!
  repairs: [Repair!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type BreakdownEdge {
  cursor: String
  node: Breakdown
}

type BreakdownNotif {
  count: Int

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type BreakdownPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input BulkAssignInput {
  entityIds: [Int!]!
  type: String!
  userIds: [Int!]!
}

input BulkUnassignInput {
  entityIds: [Int!]!
  type: String!
  userIds: [Int!]!
}

input ChangeChecklistTemplateInput {
  entityId: Int!
  newChecklistId: Int!
}

type Checklist {
  attachments: [EntityAttachment!]!
  comments: [ChecklistComment!]!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  currentMeterReading: Int
  dailyUsageHours: Int
  entity: Entity
  from: Date!
  id: Int!
  items: [ChecklistItem!]!
  summary: ChecklistSummary
  to: Date!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Int
}

type ChecklistComment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  id: Int!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
}

input ChecklistInput {
  date: Date!
  entityId: Int!
  type: String!
}

type ChecklistItem {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  id: Int!
  issues: [ChecklistComment!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ChecklistSummary {
  attachments: [EntityAttachment!]!
  comments: [ChecklistComment!]!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  currentMeterReading: Int
  dailyUsageHours: Int
  entity: Entity
  from: Date!
  hasComments: Boolean!
  hasIssues: Boolean!
  id: Int!
  itemCompletion: String!
  items: [ChecklistItem!]!
  summary: ChecklistSummary
  to: Date!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Int
}

input ChecklistSummaryInput {
  entityId: Int!
  from: Date!
  to: Date!
  type: String!
}

type ChecklistTemplate {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entitiesDaily: [Entity!]
  entitiesWeekly: [Entity!]
  id: Int!
  items: [ChecklistTemplateItem!]!
  name: String
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ChecklistTemplateConnection {
  edges: [ChecklistTemplateEdge!]
  pageInfo: ChecklistTemplatePageInfo
}

type ChecklistTemplateEdge {
  cursor: String
  node: ChecklistTemplate
}

type ChecklistTemplateItem {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ChecklistTemplatePageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input CreateApiKeyInput {
  expiresAt: Date
  name: String!
  permissions: [String!]!
}

input CreateBreakdownCommentInput {
  breakdownId: Int
  description: String!
  detailId: Int
  type: String!
}

input CreateBreakdownDetailInput {
  breakdownId: Int
  description: String!
}

input CreateBreakdownInput {
  details: [String!]
  entityId: Int!
  estimatedDateOfRepair: Date
  type: String!
}

input CreateChecklistTemplateInput {
  items: [String!]!
  name: String!
  type: String!
}

input CreateDivisionInput {
  name: String!
}

input CreateLocationInput {
  name: String!
  skipFriday: Boolean
  zoneId: Int
}

input CreateRepairCommentInput {
  description: String!
  repairId: Int!
  type: String!
}

input CreateRepairInput {
  breakdownDetailId: Int
  breakdownId: Int
  entityId: Int!
  name: String!
}

input CreateSparePRDetailInput {
  description: String!
  sparePRId: Int
}

input CreateSparePrInput {
  details: [String!]
  entityId: Int!
  name: String!
  requestedDate: Date
}

input CreateTypeInput {
  entityType: String!
  name: String!
}

input CreateZoneInput {
  name: String!
}

"""Date custom scalar type"""
scalar Date

type Division {
  assignees: [DivisionAssign!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entity: [Entity!]
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type DivisionAssign {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  division: Division
  divisionId: Int
  id: Int!
  removedAt: Date

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
  userId: Int
}

type DivisionAssignEdge {
  cursor: String
  node: DivisionAssign
}

input DivisionAssignInput {
  divisionId: Int!
  entityIds: [Int!]
  userIds: [Int!]
}

type DivisionAssignPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type DivisionEdge {
  cursor: String
  node: Division
}

type DivisionPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input EditApiKeyInput {
  keyId: Int!
  name: String
  permissions: [String!]
}

type Entity {
  assignees: [EntityAssignment!]
  brand: String
  breakdowns: [Breakdown!]
  checklistItems: [ChecklistItem!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User
  currentRunning: Int
  deletedAt: Date
  division: Division
  engine: String
  histories: [EntityHistory!]
  id: Int!
  interService: Int
  lastService: Int
  location: Location
  machineNumber: String
  measurement: String
  model: String
  parentEntityId: Int
  periodicMaintenancePlans: [EntityPeriodicMaintenance!]
  periodicMaintenances: [PeriodicMaintenance!]
  registeredDate: Date
  repairs: [Repair!]
  sparePRs: [SparePr!]
  status: String
  statusChangedAt: Date
  subEntities: [Entity!]
  type: Type

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  zone: String
}

type EntityAssignment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entity: Entity
  entityId: Int!
  id: Int!
  removedAt: Date
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
  userId: Int!
}

type EntityAssignmentEdge {
  cursor: String
  node: EntityAssignment
}

type EntityAssignmentPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityAttachment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  entityId: Int!
  id: Int!
  mimeType: String
  mode: String!
  originalName: String
  sharepointFileName: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
}

type EntityAttachmentEdge {
  cursor: String
  node: EntityAttachment
}

type EntityAttachmentPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input EntityChecklistTemplateInput {
  entityId: Int!
  type: String!
}

type EntityEdge {
  cursor: String
  node: Entity
}

type EntityHistory {
  breakdownHour: Float
  completedBy: User
  completedById: Int

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  entityId: Int
  entityStatus: String
  entityType: String
  id: Int!
  idleHour: Float
  location: Location
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Float
}

type EntityHistoryEdge {
  cursor: String
  node: EntityHistory
}

type EntityHistoryPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityPMTask {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String
  parentTask: EntityPMTask
  parentTaskId: Int
  periodicMaintenance: EntityPeriodicMaintenance!
  periodicMaintenanceId: Int
  subTasks: [EntityPMTask!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type EntityPMTaskEdge {
  cursor: String
  node: EntityPMTask
}

type EntityPMTaskPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityPeriodicMaintenance {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entity: Entity!
  entityId: Int!
  entityPeriodicMaintenanceTask: [EntityPMTask!]
  id: Int!
  measurement: String
  startDate: Date
  status: PeriodicMaintenanceStatus!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  value: Int
  verifiedAt: Date
  verifiedBy: User
}

type EntityRepairRequest {
  additionalInfo: String
  approvedAt: Date
  approvedBy: User
  approverId: Int
  attendInfo: String

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entityId: Int!
  id: Int!
  internal: Boolean
  location: String
  operator: User
  operatorId: Int
  projectManager: User
  projectManagerId: Int
  projectName: String
  reason: String
  repairedAt: Date
  repairedBy: User
  repairedById: Int
  requestedBy: User
  supervisor: User
  supervisorId: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type EntityRepairRequestEdge {
  cursor: String
  node: EntityRepairRequest
}

type EntityRepairRequestPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type EntityUsageHistory {
  breakdownHour: Int

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  date: Date!
  id: Int!
  idleHour: Int
  na: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  workingHour: Int
}

input IncompleteChecklistInput {
  date: Date!
  isAssigned: Boolean
  type: String!
}

type IncompleteChecklistSummary {
  count: Int!
  date: Date!
}

input IncompleteChecklistSummaryInput {
  from: Date!
  isAssigned: Boolean
  to: Date!
  type: String!
}

type Location {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String!
  skipFriday: Boolean

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  zone: Zone
}

type LocationAssign {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  location: Location
  locationId: Int
  removedAt: Date

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User
  userId: Int
}

type LocationAssignEdge {
  cursor: String
  node: LocationAssign
}

input LocationAssignInput {
  entityIds: [Int!]
  locationId: Int!
  userIds: [Int!]
}

type LocationAssignPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type LocationEdge {
  cursor: String
  node: Location
}

type LocationPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Mutation {
  activatePM(id: Int!): String!
  addAppUser(roles: [Int!]!, userId: String!): String!
  addBreakdownComment(createBreakdownCommentInput: CreateBreakdownCommentInput!): String!
  addBreakdownDetail(createBreakdownDetailInput: CreateBreakdownDetailInput!): String!
  addChecklistComment(checklistId: Int!, comment: String!): String!
  addChecklistIssue(checklistId: Int!, comment: String!, itemId: Int!): String!
  addChecklistTemplateItem(entityId: Int, id: Int!, name: String!): String!
  addEntityPeriodicMaintenance(entityId: Int!, measurement: String!, startDate: Date!, tasks: [String!], title: String!, value: Int!): String!
  addEntityRepairRequest(additionalInfo: String, attendInfo: String, entityId: Int!, internal: Boolean, location: String, operatorId: Int, projectManagerId: Int, projectName: String, reason: String, supervisorId: Int): String!
  addPeriodicMaintenanceComment(description: String!, periodicMaintenanceId: Int!, taskId: Int, type: String!): String!
  addRepairComment(createRepairCommentInput: CreateRepairCommentInput!): String!
  addRole(name: String!): String!
  addSparePRDetail(createSparePRDetailInput: CreateSparePRDetailInput!): String!
  addUserRole(roles: [Int!]!, userId: Int!): String!
  assignEntityToDivision(input: DivisionAssignInput!): String!
  assignEntityToLocation(input: LocationAssignInput!): String!
  assignPeriodicMaintenanceTemplate(entityId: Int!, originId: Int!): String!
  assignPermission(permissions: [String!]!, roleId: Int!): String!
  assignUserToDivision(input: DivisionAssignInput!): String!
  assignUserToEntity(entityId: Int!, type: String!, userIds: [Int!]!): String!
  assignUserToLocation(input: LocationAssignInput!): String!
  bulkAssign(input: BulkAssignInput!): String!
  bulkUnassign(input: BulkUnassignInput!): String!
  bulkUnassignUserFromDivision(input: DivisionAssignInput!): String!
  bulkUnassignUserFromLocation(input: LocationAssignInput!): String!
  changeChecklistTemplate(input: ChangeChecklistTemplateInput!): String!
  createApiKey(input: CreateApiKeyInput!): String!
  createBreakdown(createBreakdownInput: CreateBreakdownInput!): String!
  createChecklistTemplate(createChecklistTemplateInput: CreateChecklistTemplateInput!): String!
  createDivision(input: CreateDivisionInput!): String!
  createEntity(brand: String, currentRunning: Int, divisionId: Int, engine: String, lastService: Int, locationId: Int, machineNumber: String, measurement: String, model: String, parentEntityId: Int, registeredDate: Date, typeId: Int): String!
  createEntityPeriodicMaintenanceTask(name: String!, parentTaskId: Int, periodicMaintenanceId: Int!): String!
  createLocation(input: CreateLocationInput!): String!
  createPeriodicMaintenance(currentMeterReading: Int, measurement: String!, name: String!, recur: Boolean, value: Int): String!
  createPeriodicMaintenanceTask(name: String!, parentTaskId: Int, periodicMaintenanceId: Int!): String!
  createRepair(createRepairInput: CreateRepairInput!): String!
  createSparePR(createSparePrInput: CreateSparePrInput!): String!
  createType(createTypeInput: CreateTypeInput!): String!
  createZone(input: CreateZoneInput!): String!
  deactivateApiKey(id: Int!): String!
  deleteEntityPMTask(id: Int!): String!
  deleteEntityPeriodicMaintenance(id: Int!): String!
  deleteEntityRepairRequest(id: Int!): String!
  deleteOriginPeriodicMaintenance(id: Int!): String!
  deletePeriodicMaintenance(id: Int!): String!
  deletePeriodicMaintenanceTask(id: Int!): String!
  editEntity(brand: String, divisionId: Int, engine: String, id: Int!, locationId: Int, machineNumber: String, measurement: String, model: String, registeredDate: Date, typeId: Int): String!
  editEntityAttachment(description: String!, id: Int!): String!
  editEntityPeriodicMaintenance(id: Int!, measurement: String!, startDate: Date!, title: String!, value: Int!): String!
  editEntityRepairRequest(additionalInfo: String, attendInfo: String, id: Int!, internal: Boolean, location: String, operatorId: Int, projectManagerId: Int, projectName: String, reason: String, supervisorId: Int): String!
  editKey(input: EditApiKeyInput!): String!
  editPeriodicMaintenance(currentMeterReading: Int, id: Int!, measurement: String, name: String!, recur: Boolean, value: Int): String!
  editRole(id: Int!, name: String!): String!
  flushRedis: String!
  readAllNotifications: Boolean!
  readNotification(notificationId: Int!): String!
  removeBreakdown(id: Int!): String!
  removeBreakdownComment(id: Int!): String!
  removeBreakdownDetail(id: Int!): String!
  removeChecklistComment(id: Int!): String!
  removeChecklistTemplate(id: Int!): String!
  removeChecklistTemplateItem(entityId: Int, id: Int!, templateId: Int): String!
  removeDivision(id: Int!): String!
  removeEntity(id: Int!): String!
  removeEntityAttachment(id: Int!): String!
  removeLocation(id: Int!): String!
  removePeriodicMaintenanceComment(id: Int!): String!
  removeRepair(id: Int!): String!
  removeRepairComment(id: Int!): String!
  removeRole(id: Int!): String!
  removeSparePR(id: Int!): String!
  removeSparePRDetail(id: Int!): String!
  removeType(id: Int!): String!
  removeUserRole(roleId: Int!, userId: Int!): String!
  removeZone(id: Int!): String!
  setEntityPeriodicMaintenanceStatus(id: Int!, status: PeriodicMaintenanceStatus!): String!
  setEntityStatus(entityId: Int!, status: String!): String!
  toggleApproveEntityRepairRequest(approve: Boolean!, id: Int!): String!
  toggleChecklistItem(complete: Boolean!, id: Int!): String!
  toggleComplete(complete: Boolean!, id: Int!): String!
  toggleCompleteEntityRepairRequest(complete: Boolean!, id: Int!): String!
  toggleEntityPMTask(complete: Boolean!, id: Int!): String!
  togglePeriodicMaintenanceTask(complete: Boolean!, id: Int!): String!
  togglePermission(complete: Boolean!, permission: String!, roleId: Int!): String!
  toggleSparePRComplete(complete: Boolean!, id: Int!): String!
  toggleVerifyEntityPeriodicMaintenance(id: Int!, verify: Boolean!): String!
  toggleVerifyPeriodicMaintenance(id: Int!, verify: Boolean!): String!
  unassignUserFromDivision(id: Int!): String!
  unassignUserFromEntity(entityId: Int!, type: String!, userId: Int!): String!
  unassignUserFromLocation(id: Int!): String!

  """
  Not to be called from frontend. Meant to be used when templates of entities are updated manually in the DB.
  """
  updateAllEntityChecklists: String!
  updateBreakdown(updateBreakdownInput: UpdateBreakdownInput!): String!
  updateChecklistTemplate(updateChecklistTemplateInput: UpdateChecklistTemplateInput!): String!
  updateDailyUsage(hours: Int!, id: Int!): String!
  updateDivision(input: UpdateDivisionInput!): String!
  updateEntityDivision(divisionId: Int!, entityId: Int!): String!
  updateEntityLocation(entityId: Int!, locationId: Int!): String!
  updateLocation(input: UpdateLocationInput!): String!
  updatePeriodicMaintenanceReading(id: Int!, reading: Int!): String!
  updateReading(id: Int!, reading: Int!): String!
  updateRepair(updateRepairInput: UpdateRepairInput!): String!
  updateSparePR(updateSparePrInput: UpdateSparePrInput!): String!
  updateType(updateTypeInput: UpdateTypeInput!): String!
  updateWorkingHours(id: Int!, newHrs: Int!): String!
  updateZone(input: UpdateZoneInput!): String!
  upsertPMNotificationReminder(day: Int, hour: Int, kilometer: Int, month: Int, periodicMaintenanceId: Int, type: String, week: Int): String!
}

type Notification {
  body: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  link: String
  readAt: Date

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  user: User!
  userId: Int!
}

type PMTaskStatusCount {
  complete: Int
  ongoing: Int
}

type PaginatedApiKey {
  edges: [ApiKeyEdge!]
  pageInfo: ApiKeyPageInfo
}

type PaginatedAssignment {
  edges: [EntityAssignmentEdge!]
  pageInfo: EntityAssignmentPageInfo
}

type PaginatedBreakdown {
  edges: [BreakdownEdge!]
  pageInfo: BreakdownPageInfo
}

type PaginatedDivision {
  edges: [DivisionEdge!]
  pageInfo: DivisionPageInfo
}

type PaginatedDivisionAssignment {
  edges: [DivisionAssignEdge!]
  pageInfo: DivisionAssignPageInfo
}

type PaginatedEntity {
  edges: [EntityEdge!]
  pageInfo: EntityPageInfo
}

type PaginatedEntityAttachment {
  edges: [EntityAttachmentEdge!]
  pageInfo: EntityAttachmentPageInfo
}

type PaginatedEntityHistory {
  edges: [EntityHistoryEdge!]
  pageInfo: EntityHistoryPageInfo
}

type PaginatedEntityPeriodicMaintenance {
  edges: [PeriodicMaintenanceEdge!]
  pageInfo: PeriodicMaintenancePageInfo
}

type PaginatedEntityPeriodicMaintenanceTask {
  edges: [EntityPMTaskEdge!]
  pageInfo: EntityPMTaskPageInfo
}

type PaginatedEntityRepair {
  edges: [EntityRepairRequestEdge!]
  pageInfo: EntityRepairRequestPageInfo
}

type PaginatedLocation {
  edges: [LocationEdge!]
  pageInfo: LocationPageInfo
}

type PaginatedLocationAssignment {
  edges: [LocationAssignEdge!]
  pageInfo: LocationAssignPageInfo
}

type PaginatedPermissionRole {
  edges: [RolesEdge!]
  pageInfo: RolesPageInfo
}

type PaginatedRepair {
  edges: [RepairEdge!]
  pageInfo: RepairPageInfo
}

type PaginatedSparePR {
  edges: [SparePrEdge!]
  pageInfo: SparePrPageInfo
}

type PaginatedType {
  edges: [TypeEdge!]
  pageInfo: TypePageInfo
}

type PaginatedUsers {
  edges: [UserEdge!]
  pageInfo: UserPageInfo
}

type PaginatedZone {
  edges: [ZoneEdge!]
  pageInfo: ZonePageInfo
}

type PeriodicMaintenance {
  comments: [PeriodicMaintenanceComment!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  currentMeterReading: Int
  entity: Entity
  entityId: Int
  from: Date
  id: Int!
  measurement: String
  name: String
  notificationReminder: [PeriodicMaintenanceNotification!]
  originId: Int
  recur: Boolean!
  status: String
  tasks: [PeriodicMaintenanceTask!]
  to: Date
  type: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  value: Int
  verifiedAt: Date
  verifiedBy: User
}

type PeriodicMaintenanceComment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User
  description: String!
  id: Int!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type PeriodicMaintenanceConnection {
  edges: [PeriodicMaintenanceEdge!]
  pageInfo: PeriodicMaintenancePageInfo
}

type PeriodicMaintenanceEdge {
  cursor: String
  node: PeriodicMaintenance
}

input PeriodicMaintenanceInput {
  entityId: Int!
  from: Date!
  to: Date!
}

type PeriodicMaintenanceNotification {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  measurement: String
  originId: Int
  periodicMaintenanceId: Int
  previousValue: Int
  type: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  value: Int
}

type PeriodicMaintenancePageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Periodic Maintenance statuses."""
enum PeriodicMaintenanceStatus {
  Done
  Missed
  Pending
}

type PeriodicMaintenanceSummary {
  comments: [PeriodicMaintenanceComment!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  currentMeterReading: Int
  entity: Entity
  entityId: Int
  from: Date
  hasObservations: Boolean!
  hasRemarks: Boolean!
  hasVerify: Boolean!
  id: Int!
  measurement: String
  name: String
  notificationReminder: [PeriodicMaintenanceNotification!]
  originId: Int
  recur: Boolean!
  status: String
  taskCompletion: String!
  tasks: [PeriodicMaintenanceTask!]
  to: Date
  type: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  value: Int
  verifiedAt: Date
  verifiedBy: User
}

type PeriodicMaintenanceTask {
  completedAt: Date
  completedBy: User

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String
  parentTask: PeriodicMaintenanceTask
  parentTaskId: Int
  periodicMaintenance: PeriodicMaintenance!
  periodicMaintenanceId: Int
  remarks: [PeriodicMaintenanceComment!]
  subTasks: [PeriodicMaintenanceTask!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type PermissionRole {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  permission: String!
  roleId: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type PermissionWithDescription {
  description: String!
  name: String!
  type: String!
}

type Profile {
  department: String!
  division: String!
  email: String
  fullName: String!
  post: String!
  rcno: Int!
  section: String
  telExtension: Int
  telMobile: Int
  telOffice: Int
  unit: String
  userId: String!
}

type Query {
  allEntityBreakdownCount: entityBreakdownCount!
  allEntityPMStatusCount: maintenanceStatusCount!
  allEntityPMTaskStatusCount(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    zoneIds: [Int!]
  ): PMTaskStatusCount!
  allEntityStatusCount(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    brand: [String!]
    createdById: Int
    createdByUserId: String
    divisionExist: Boolean
    divisionIds: [Int!]
    engine: [String!]
    entityIds: [Int!]
    entityType: [String!]

    """Paginate first"""
    first: Int
    gteInterService: String
    isAssigned: Boolean
    isIncompleteChecklistTask: Boolean

    """Paginate last"""
    last: Int
    locationExist: Boolean
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    search: String
    status: [String!]
    typeIds: [Int!]
    zoneIds: [Int!]
  ): entityStatusCount!
  allEntityUsageHistory(from: Date!, locationIds: [Int!], measurement: [String!], search: String, to: Date!, typeIds: [Int!], zoneIds: [Int!]): [AllEntityUsageHistory!]!
  allPMStatusCount(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    divisionIds: [Int!]
    entityId: Int

    """Paginate first"""
    first: Int
    from: Date
    gteInterService: String

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    pmStatus: [String!]
    search: String
    to: Date
    type: String
    type2Ids: [Int!]
    zoneIds: [Int!]
  ): pmStatusCount!
  apiKeys(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedApiKey!
  appUsers: [User!]!
  assignedEntities(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    brand: [String!]
    createdById: Int
    createdByUserId: String
    divisionExist: Boolean
    divisionIds: [Int!]
    engine: [String!]
    entityIds: [Int!]
    entityType: [String!]

    """Paginate first"""
    first: Int
    gteInterService: String
    isAssigned: Boolean
    isIncompleteChecklistTask: Boolean

    """Paginate last"""
    last: Int
    locationExist: Boolean
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    search: String
    status: [String!]
    typeIds: [Int!]
    zoneIds: [Int!]
  ): PaginatedEntity!
  assignments(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    current: Boolean!
    entityIds: [Int!]!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    type: String
    userIds: [Int!]!
  ): PaginatedAssignment!
  breakdown(id: Int!): Breakdown!
  breakdownCount: BreakdownNotif!
  breakdowns(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedBreakdown!
  checkCopyPMExist(id: Int!): Boolean!
  checklist(input: ChecklistInput!): Checklist
  checklistSummary(input: ChecklistSummaryInput!): [ChecklistSummary!]!
  checklistTemplate(id: Int!): ChecklistTemplate!
  checklistTemplates(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
    type: String
  ): ChecklistTemplateConnection!
  checklistWithIssueSummary(input: IncompleteChecklistSummaryInput!): [IncompleteChecklistSummary!]
  checklistsWithIssue(input: IncompleteChecklistInput!): [Checklist!]
  checklistsWithIssuePastTwoDays: [Int!]
  division(id: Int!): Division!
  divisionAssignments(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    current: Boolean!
    divisionIds: [Int!]

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    userIds: [Int!]!
  ): PaginatedDivisionAssignment!
  divisions(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    divisionId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
  ): PaginatedDivision!
  entityAttachment(id: Int!): EntityAttachment!
  entityAttachments(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedEntityAttachment!
  entityChecklistTemplate(input: EntityChecklistTemplateInput!): ChecklistTemplate!
  getAllAssignedEntity(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    brand: [String!]
    createdById: Int
    createdByUserId: String
    divisionExist: Boolean
    divisionIds: [Int!]
    engine: [String!]
    entityIds: [Int!]
    entityType: [String!]

    """Paginate first"""
    first: Int
    gteInterService: String
    isAssigned: Boolean
    isIncompleteChecklistTask: Boolean

    """Paginate last"""
    last: Int
    locationExist: Boolean
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    search: String
    status: [String!]
    typeIds: [Int!]
    zoneIds: [Int!]
  ): PaginatedEntity!
  getAllEntity(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    brand: [String!]
    createdById: Int
    createdByUserId: String
    divisionExist: Boolean
    divisionIds: [Int!]
    engine: [String!]
    entityIds: [Int!]
    entityType: [String!]

    """Paginate first"""
    first: Int
    gteInterService: String
    isAssigned: Boolean
    isIncompleteChecklistTask: Boolean

    """Paginate last"""
    last: Int
    locationExist: Boolean
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    search: String
    status: [String!]
    typeIds: [Int!]
    zoneIds: [Int!]
  ): PaginatedEntity!
  getAllEntityChecklistAndPMSummary: entityChecklistAndPMSummary!
  getAllEntityPMSummary: entityPMSummary!
  getAllEntityPeriodicMaintenance(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    zoneIds: [Int!]
  ): PaginatedEntityPeriodicMaintenance!
  getAllEntityPeriodicMaintenanceTask(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    zoneIds: [Int!]
  ): PaginatedEntityPeriodicMaintenanceTask!
  getAllEntityUtilization(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    brand: [String!]
    createdById: Int
    createdByUserId: String
    divisionExist: Boolean
    divisionIds: [Int!]
    engine: [String!]
    entityIds: [Int!]
    entityType: [String!]

    """Paginate first"""
    first: Int
    gteInterService: String
    isAssigned: Boolean
    isIncompleteChecklistTask: Boolean

    """Paginate last"""
    last: Int
    locationExist: Boolean
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    search: String
    status: [String!]
    typeIds: [Int!]
    zoneIds: [Int!]
  ): PaginatedEntity!
  getAllEntityWithoutPagination(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    brand: [String!]
    createdById: Int
    createdByUserId: String
    divisionExist: Boolean
    divisionIds: [Int!]
    engine: [String!]
    entityIds: [Int!]
    entityType: [String!]

    """Paginate first"""
    first: Int
    gteInterService: String
    isAssigned: Boolean
    isIncompleteChecklistTask: Boolean

    """Paginate last"""
    last: Int
    locationExist: Boolean
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    search: String
    status: [String!]
    typeIds: [Int!]
    zoneIds: [Int!]
  ): [Entity!]!
  getAllHistoryOfEntity(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int!

    """Paginate first"""
    first: Int
    from: Date

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    to: Date
  ): PaginatedEntityHistory!
  getAllPMWithPagination(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    divisionIds: [Int!]
    entityId: Int

    """Paginate first"""
    first: Int
    from: Date
    gteInterService: String

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    pmStatus: [String!]
    search: String
    to: Date
    type: String
    type2Ids: [Int!]
    zoneIds: [Int!]
  ): PeriodicMaintenanceConnection!
  getAllPeriodicMaintenanceOfEntity(
    """Paginate after opaque cursor"""
    after: String
    assignedToId: Int

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
    zoneIds: [Int!]
  ): PaginatedEntityPeriodicMaintenance!
  getAllRepairRequestOfEntity(
    """Paginate after opaque cursor"""
    after: String
    approve: Boolean

    """Paginate before opaque cursor"""
    before: String
    complete: Boolean
    entityId: Int!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedEntityRepair!
  getAllRoles(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    createdById: Int
    createdByUserId: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedPermissionRole!
  getAllTemplatesOfOriginPM(id: Int!): [PeriodicMaintenance!]!
  getAllUsers(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    divisionIds: [Int!]

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    search: String
  ): PaginatedUsers!
  getEntityLatestAttachment(entityId: Int!): EntityAttachment!
  getRoleWithPermission(roleId: Int!): Roles!
  getRoles: [Roles!]!
  getSingleEntity(entityId: Int!): Entity!
  getUsersWithPermission(permissions: [String!]!, search: String): [User!]!
  incompleteChecklistSummary(input: IncompleteChecklistSummaryInput!): [IncompleteChecklistSummary!]
  incompleteChecklists(input: IncompleteChecklistInput!): [Checklist!]
  incompleteChecklistsPastTwoDays: [Int!]
  location(id: Int!): Location!
  locationAssignments(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    current: Boolean!

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    userIds: [Int!]!
  ): PaginatedLocationAssignment!
  locations(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
    showOnlyUnzoned: Boolean
    withSkipFriday: Boolean
    zoneId: Int
  ): PaginatedLocation!
  me: UserWithRoles!
  notifications: [Notification!]!
  periodicMaintenance(input: PeriodicMaintenanceInput!): PeriodicMaintenance
  periodicMaintenanceSummary(entityId: Int!, from: Date!, to: Date!): [PeriodicMaintenanceSummary!]!
  periodicMaintenances(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    divisionIds: [Int!]
    entityId: Int

    """Paginate first"""
    first: Int
    from: Date
    gteInterService: String

    """Paginate last"""
    last: Int
    locationIds: [Int!]
    lteInterService: String
    measurement: [String!]
    pmStatus: [String!]
    search: String
    to: Date
    type: String
    type2Ids: [Int!]
    zoneIds: [Int!]
  ): PeriodicMaintenanceConnection!
  permissions: [PermissionWithDescription!]!
  profile: Profile!
  redisGet(key: String!): String
  redisKeys: [String!]!
  repair(id: Int!): Repair!
  repairs(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedRepair!
  searchAPSUsers(query: String!): [User!]!
  searchDivision(limit: Int, query: String): [Division!]!
  searchEntity(entityIds: [Int!], entityType: String, limit: Int, query: String): [Entity!]!
  singleEntityUsageHistory(entityId: Int!, from: Date!, to: Date!): [EntityUsageHistory!]!
  sparePR(id: Int!): SparePr!
  sparePRs(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityId: Int

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    search: String
  ): PaginatedSparePR!
  type(id: Int!): Type!
  types(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    entityType: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
  ): PaginatedType!
  zone(id: Int!): Zone!
  zones(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    name: String
  ): PaginatedZone!
}

type Repair {
  breakdown: Breakdown
  breakdownDetail: BreakdownDetail
  comments: [RepairComment!]

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  entity: Entity!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type RepairComment {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User
  description: String!
  id: Int!
  type: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type RepairEdge {
  cursor: String
  node: Repair
}

type RepairPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Roles {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  id: Int!
  name: String!
  permissionRoles: [PermissionRole!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type RolesEdge {
  cursor: String
  node: Roles
}

type RolesPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type SparePRDetail {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  description: String!
  id: Int!
  sparePR: SparePr!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type SparePr {
  completedAt: Date

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  createdBy: User!
  entity: Entity!
  id: Int!
  name: String!
  requestedDate: Date
  sparePRDetails: [SparePRDetail!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type SparePrEdge {
  cursor: String
  node: SparePr
}

type SparePrPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Subscription {
  notificationCreated(userId: Int!): Notification!
}

type Type {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  entityType: String!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type TypeEdge {
  cursor: String
  node: Type
}

type TypePageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input UpdateBreakdownInput {
  details: [String!]
  entityId: Int
  estimatedDateOfRepair: Date
  id: Int!
  type: String
}

input UpdateChecklistTemplateInput {
  id: Int!
  items: [String!]
  name: String
  type: String
}

input UpdateDivisionInput {
  id: Int!
  name: String
}

input UpdateLocationInput {
  id: Int!
  name: String
  skipFriday: Boolean
  zoneId: Int
}

input UpdateRepairInput {
  breakdownDetailId: Int
  breakdownId: Int
  entityId: Int
  id: Int!
  name: String
}

input UpdateSparePrInput {
  details: [String!]
  entityId: Int
  id: Int!
  name: String
  requestedDate: Date
}

input UpdateTypeInput {
  entityType: String
  id: Int!
  name: String
}

input UpdateZoneInput {
  id: Int!
  name: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String!
  fullName: String!
  id: Int!
  locationId: Int
  permissions: [String!]
  rcno: Int!
  roles: [UserRoles!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userId: String!
}

type UserEdge {
  cursor: String
  node: User
}

type UserPageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type UserRoles {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  role: Roles
  roleId: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userId: Int!
}

type UserWithRoles {
  email: String!
  entityAssignment: [EntityAssignment!]
  fullName: String!
  id: Int!
  location: Location
  rcno: Int!
  roles: [UserRoles!]
  userId: String!
}

type Zone {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type ZoneEdge {
  cursor: String
  node: Zone
}

type ZonePageInfo {
  count: Int!
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type entityBreakdownCount {
  machine: Int
  vehicle: Int
  vessel: Int
}

type entityChecklistAndPMSummary {
  checklist: [String!]
  machineChecklistComplete: Boolean
  machineTaskComplete: Boolean
  pm: [String!]
  vehicleChecklistComplete: Boolean
  vehicleTaskComplete: Boolean
  vesselChecklistComplete: Boolean
  vesselTaskComplete: Boolean
}

type entityPMSummary {
  checklist: [Int!]
  pm: [Int!]
}

type entityStatusCount {
  breakdown: Int
  critical: Int
  dispose: Int
  working: Int
}

type maintenanceStatusCount {
  done: Int
  missed: Int
  pending: Int
}

type pmStatusCount {
  completed: Int
  ongoing: Int
  overdue: Int
  upcoming: Int
}
